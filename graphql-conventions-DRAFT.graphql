# GraphQL Schema Conventions:

1. Naming: !COMMIT!
Name your mutations "verb" first. Then the object, or "noun", if applicable. Use camelCase.
Query: [type] + “s” (i.e. user, users)
Mutation: [action][type] (i.e. createUser, deleteUser)
Subscription: [type] + "Subscription" (i.e. userSubscription)
Input: [action][type] + "Input" (i.e. CreateUserInput)
Payload: [action][type] + "Payload" (i.e. CreateUserPayload)


2. Inputs: !COMMIT!
Mutations, Queries and Subscriptions should only ever have one input argument "input".

updatePost(input: { id: 4, post: { title: "..." } }) { ... }
instaed of 
updatePost(id: 4, newTitle: "...") { ... }

user(input: { id: "..." })


3. Payloads: !COMMIT!

# Mutation
type CreateUserPayload {
	user: User
	# errors: [Error!]
	# metadata: CustomMetadata ??
}

# Query
type UserPayload {
    user: User,
	# errors: [Error!]
	# metadata: CustomMetadata ??
}

# Subscriptions below

4. UUIDs always !COMMIT!
type Node {
    uuid: UUID!
}


5. Connections by default everywhere, even in nested objects !COMMIT!

type User {
    name: String!
    posts(input: PostsInput): PostsConnection!
    ...
}


6. Connection Input !COMMIT!

interface Node {
    uuid: UUID!
}

type WhereNodesInput {
    ids: [Node!]!
}

type ProductsInput {
	where: {
		title: String!
		category: WhereNodesInput, # Use General Type 
		subcategory: WhereNodesInput
	}
    pagination: { # relay: RelayInput! if Cursor baised
        itemsPerPage: Int @default(10)
        pageNumber: Int
    }
	sort: [CustomSortEnum!] # null or array with at least one item
}

type RelayInput {
    first: Int
    last: Int
    before: String
    after: String
}


7. Define Default Pagination Rules: !COMMIT!
Max Page Size: 100 
Default Page Size: 10
Get All Items: Impossible with one request if more than 100


8. ConnectionPayload !COMMIT!

interface ConnectionPayload {
    items: [Node!]!
    pageInfo: {
        currentPage: Int!
        totalPages: Int!
    }
	totalItems: Int!
}

type UserConnectionPayload implements ConnectionPayload {
    items: [User!]! # IF can't implement like this than remove ConnectionPayload.items
    pageInfo: {
        currentPage: Int!
        totalPages: Int!
    }
	totalItems: Int!
}


9. Mutation Patch by default !COMMIT!
Use patch instead of update by default!


10. Bulk Updates !COMMIT!
updateUsers(input: [UpdateUserInput!]): [UpdateUserPayload!]!


11. SubscriprionNaming: Dicuss once be known about how many Apollo CLient batch Subscriptions,
because if the don't batch then we need as less Subscription as we can !!

[type]SubscriptionPayload - UserSubscriptionPayload
node: [type]Subscription if API can’t return exact type - UserSubscription instead of just User

createUserSubscription()
updateUserSubscription()
deleteUserSubscription()
updateUserLikesSubscription()

12. Subscription Input Schema: Dicuss once be known about how many Apollo CLient batch Subscriptions


13. Subscription Payload Schema: Dicuss once be known about how many Apollo CLient batch Subscriptions

type SubscriptionPayload {
	fields: [String!]!
	node: Node
	errors: [Error!] ??
}


14. Reordering without `weight: Int` by default. !COMMIT!


15. Unified Error Schema
type Error {
	message: String!
	code: String!
    validation: [
        {
            message: String!
	        code: String!
        }
    ]
}


16. Async Operationns like LIke return True, Think how to FIX . ??Ask Hobzelayn on what we changed this?? Maybe it was about cyclic dependencies restriction.



17. Return ID after Delete !COMMIT!
{
    node: {
        uuid: UUID!
        # Can add more fields if needed
    }
}


18. Discuss Unions and Interfaces ??

interface Node {
    uuid: UUID!
}

20. Groupe by Domain - https://api.travelgatex.com/ ??

21. Describe fields in schema

TODO:
1. Subscription: Discuss how to trigger for only required fuields
2. Subscriptions: how to handle "undefined" update?
3. Reordering: `weight: Int!` is required for multisorting.
4. Unified Error Schema
5. Discuss default fileds in pagination and sorting
6. Discuss Groupe by Domain
7. Discuss about cyclic dependencies restriction. Maybe on Query level.
