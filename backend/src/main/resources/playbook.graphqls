type Playbook implements Node {
    id: UUID!
    name: String!
    description: String
    image: Resource!
    status: PlaybookStatus
    sections: [PlaybookSection!]!
    createdAt: DateTime!
    updatedAt: DateTime!
}

enum PlaybookSort {
    updatedAt_DESC
    updatedAt_ASC
}

enum PlaybookStatus {
    DRAFT
    PUBLISHED
    DELETED
}

type PlaybookPayload {
    playbook: Playbook
}

type PlaybookConnectionPayload implements ConnectionPayload {
    items: [Playbook!]!
    pageInfo: PageInfo!
    totalItems: Int!
}

input DeletePlaybookInput {
    id: UUID!
}

input CreatePlaybookInput {
    name: String!
    description: String
    image: ResourceInput!
    status: PlaybookStatus! = DRAFT
}

input PlaybookInput {
    id: UUID!
}

input PlaybooksInput {
    where: PlaybooksWhereInput
    pagination: PageInput
    sort: [PlaybookSort!] = updatedAt_DESC
}

input PlaybooksWhereInput {
    name: String
}

input PatchPlaybookInput {
    id: UUID!
    name: String
    description:String
    image: ResourceInput
    status: PlaybookStatus!
}

type DeletePlaybookPayload {
    playbook: Node
}



