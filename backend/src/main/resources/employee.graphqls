type Employee implements Node {
    id: UUID!
    firstName: String
    lastName: String
    email: String
    role: EmployeeRole
    birthday: DateTime
    reportingManager: Employee
    position: EmployeePosition
    location: Location
    avatar: String
}

type EmployeeConnectionPayload implements ConnectionPayload {
    items: [Employee!]!
    pageInfo: PageInfo!
    totalItems: Int!
}

input CreateEmployeeInput {
    firstName: String!
    lastName: String!
    birthday: DateTime!
    role: EmployeeRole!
    reportingManager: UUID
    position: UUID
    location: UUID
}

input UpdateEmployeeInput {
    id: UUID!
    firstName: String!
    lastName: String!
    birthday: DateTime!
    role: EmployeeRole!
    reportingManager: UUID
    position: UUID
    location: UUID
}

enum EmployeeRole {
    ADMIN
    EMPLOYEE
}

type EmployeePayload {
    item: Employee
}

input EmployeesInput {
    where: EmployeeWhereInput
    pagination: PageInput
    sort: [EmployeesSortEnum!]! = [firstName_ASC]
}

input EmployeeWhereInput {
    """
    Filters by 'firstName', 'lastName' and 'email', with 'OR' condition!
    """
    query: String
    location: NodeInput
}

enum EmployeesSortEnum {
    firstName_ASC
    firstName_DESC
}



