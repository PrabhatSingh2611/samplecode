type Objective implements Node {
    id: UUID!
    employee: Employee!
    name: String!
    description: String
    comments: String
    dueToDate: DateTime
    status: ObjectiveStatus
}

enum ObjectiveStatus {
    NEW
    IN_PROGRESS
    POSTPONED
    DONE
    CANCELED
}

input EmployeeObjectivesWhereInput {
    employee: NodeInput!
    status: [ObjectiveStatus!]
}

input ObjectivesInput {
    where: EmployeeObjectivesWhereInput
    pagination: PageInput
}

type ObjectiveConnectionPayload implements ConnectionPayload {
    items: [Objective!]!
    pageInfo: PageInfo!
    totalItems: Int!
}
input CreateObjectiveInput {
    employee: UUID!
    name: String!
    description: String
    comments: String
    dueToDate: DateTime!
    status: ObjectiveStatus
}

input UpdateObjectiveInput {
    id: UUID!
    employee: UUID!
    name: String!
    description: String
    comments: String
    dueToDate: DateTime!
    status: ObjectiveStatus
}
input ObjectiveInput {
    id: UUID!
}

type ObjectivePayload {
    item: Objective!
}

input DeleteObjectiveInput {
    id: UUID!
}

type DeleteObjectivePayload {
    objective: Node!
}
