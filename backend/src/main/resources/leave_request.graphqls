type LeaveRequest implements Node{
    id : UUID!
    numberOfDays: Int!
    requestDate : DateTime!
    startDate : DateTime!
    endDate : DateTime!
    employee : Employee!
    status : LeaveRequestStatus!
    comment : String
    type: LeaveType!
}

enum LeaveRequestStatus {
    NEW, APPROVED, DECLINED
}

type LeaveRequestConnectionPayload implements ConnectionPayload {
    items: [LeaveRequest!]!
    pageInfo: PageInfo!
    totalItems: Int!
}

input CreateLeaveRequestInput{
    period: StrictDatePeriod!
    status : LeaveRequestStatus!
    comment : String
    type: NodeInput!
}

input PatchLeaveRequestInput{
    id : UUID!
    period: StrictDatePeriod
    employee : NodeInput
    status : LeaveRequestStatus
    comment : String
    type: NodeInput
}

input DeleteLeaveRequestInput{
    id: UUID!
}

type LeaveRequestPayload {
    leaveRequest: LeaveRequest
}

type DeleteLeaveRequestPayload {
    leaveRequest: Node!
}

input LeaveRequestsInput {
    where: LeaveRequestWhereInput
    pagination: PageInput
    sort: [LeaveRequestsSortEnum!]! = [pending_DESC, startDate_DESC]
}

input LeaveRequestInput {
    id: UUID!
}

input LeaveRequestWhereInput {
    employee: NodeInput
    approver: NodeInput
    startDate: DateTime
    endDate: DateTime
}

enum LeaveRequestsSortEnum {
    pending_DESC
    pending_ASC
    startDate_DESC
    startDate_ASC
}
