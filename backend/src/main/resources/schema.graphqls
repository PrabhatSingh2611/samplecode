type Query {
	asset(id: Int!): Asset
	assets(input: AssetInput): AssetConnection
}

type Mutation {
	testMutation(id: Int!): Asset # playground to test
}

# common types
interface Node {
	uuid: UUID!
}

input WhereNodeInput {
	uuid: UUID
}

input PageInput {
	itemsPerPage: Int! = 10
	pageNumber: Int! = 0
}

type Connection {
	items: [Node!]!
	pageInfo: PageInfo!
	totalItems: Int!
}

type PageInfo {
	hasPreviousPage: Boolean!
	hasNextPage: Boolean!
}

# assets
input AssetInput {
    where: AssetWhereInput
    page: PageInput
}

input AssetWhereInput {
	employee: WhereNodeInput
	isArchived: Boolean # asset.archivedDate is not null - TRUE
	type: WhereNodeInput
}

type AssetConnection {
    items: [Asset!]!
    pageInfo: PageInfo
	totalItems: Int!
}

type Asset {
	id: Int!
	title: String
	serial: String
	type: AssetType
	employee: Employee
	archivedDate: ZonedDateTime
}

type AssetType {
	title: String
	icon: String
}

# employee
type Employee {
	id: Int
	uuid: UUID
	firstName: String
	lastName: String
	role: String
	birthday: ZonedDateTime
	position: String
	location: String
}

scalar UUID
scalar ZonedDateTime