#common types
interface Node {
    uuid: UUID!
}

type WhereNodesInput {
    ids: [Node!]!
}

type Query {
	asset(id: Int!): Asset
	assets(input: AssetInput): AssetConnection
}

type Mutation {
	testMutation(id: Int!): Asset #playground to test
}

#assets
type AssetInput { 
    where: {
        employee: WhereNodesInput,
        isArchived: Boolean,
        type: WhereNodesInput
    }
    Pagination: pagination
}

type AssetConnection {
    items: [Asset!]!
    pageInfo: PageInfo
	totalItems: Int!
}

type Asset {
	id: Int!
	title: String
	serial: String
	type: AssetType
	employee: Employee
	archivedDate: ZonedDateTime
}

type AssetType {
	title: String
	icon: String
}

#employee
type Employee {
	id: Int
	uuid: UUID
	firstName: String
	lastName: String
	role: String
	birthday: ZonedDateTime
	position: String
	location: String
}

scalar UUID
scalar ZonedDateTime